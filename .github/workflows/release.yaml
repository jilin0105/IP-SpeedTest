name: build

on:
  push:
    tags:
      - 'v*.*.*'  # 匹配以 v 开头，后跟数字的 Tag，例如 v1.0.0

permissions:
  contents: write
  packages: write

jobs:
  build-go-binary:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin] # 需要打包的系统
        goarch: [amd64, arm64, arm, 386] # 需要打包的架构
        exclude: # 排除某些平台和架构
          - goarch: arm64
            goos: windows
          - goarch: 386
            goos: darwin
          # arm 排除
          - goarch: arm
            goos: windows
          - goarch: arm
            goos: darwin

    steps:
      - uses: actions/checkout@v3
      - uses: wangyoucao577/go-release-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }} # 一个默认的变量，用来实现往 Release 中添加文件
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.goarch }}
          goversion: 1.21 # 可以指定编译使用的 Golang 版本
          binary_name: "iptest" # 使用固定的二进制文件名
          ldflags: -s -w -X "main.version=${{ github.ref_name }}" # 将版本号注入到 Go 二进制文件
          md5sum: false
          release_tag: ${{ github.ref_name }}  # 使用 Tag 作为 Release 的版本号
          create_release: true  # 自动创建 Release
          asset_name: "iptest-${{ matrix.goos }}-${{ matrix.goarch }}.zip" # 自定义 Release 文件名为 ZIP 格式
          compress_assets: true  # 启用压缩功能
