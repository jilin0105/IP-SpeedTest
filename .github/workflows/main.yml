name: GitHub CI

on:
  push:
    branches: [master]
    paths:
      - 'main.go'  # 仅当 main.go 文件发生变化时触发

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build-go-binary:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64, arm, 386]
        exclude:
          - goarch: arm64
            goos: windows
          - goarch: 386 
            goos: darwin 
          # arm 排除
          - goarch: arm
            goos: windows
          - goarch: arm
            goos: darwin

    steps:
      - uses: actions/checkout@v3
      - name: Get latest tag
        id: get_latest_tag
        run: |
          DEFAULT_TAG="v1.0.0"  # 默认值
          # 检查是否存在 Tag，如果不存在则使用默认值
          if git tag --list | grep -q .; then
            LATEST_TAG=$(git describe --tags --abbrev=0)
          else
            LATEST_TAG="$DEFAULT_TAG"
          fi
          echo "Latest tag: $LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
      - name: Generate new version
        id: generate_version
        run: |
          LATEST_TAG=${{ env.LATEST_TAG }}
          if [[ -z "$LATEST_TAG" ]]; then
            # 如果没有 Tag，使用默认值
            LATEST_TAG="$DEFAULT_TAG"
          fi
          # 提取主版本号、次版本号和修订号
          MAJOR=$(echo "$LATEST_TAG" | cut -d. -f1 | tr -d 'v')
          MINOR=$(echo "$LATEST_TAG" | cut -d. -f2)
          PATCH=$(echo "$LATEST_TAG" | cut -d. -f3)
          # 增加修订号
          NEW_PATCH=$((PATCH + 1))
          # 生成新版本号
          NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
      - uses: wangyoucao577/go-release-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }} # 一个默认的变量，用来实现往 Release 中添加文件
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.goarch }}
          goversion: 1.21 # 可以指定编译使用的 Golang 版本
          binary_name: "iptest" # 使用固定的二进制文件名
          ldflags: -s -w -X "main.version=${{ env.NEW_VERSION }}" # 将版本号注入到 Go 二进制文件
          md5sum: false
          release_tag: ${{ env.NEW_VERSION }}  # 使用新版本号作为 Release 的 Tag
          create_release: true  # 自动创建 Release
          asset_name: "iptest-${{ matrix.goos }}-${{ matrix.goarch }}.zip" # 自定义 Release 文件名为 ZIP 格式
          compress_assets: true  # 启用压缩功能
